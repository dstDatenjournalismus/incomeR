sex = "Zusammen",
type = "Nettobezüge",
variable = "Median"
)
devtools::load_all()
raw_data = incomeR::read_lst_data(
dir_with_excels = here("~/projects/dst/DATEN/statistik_austria/lst_daten/"),
sex = "Zusammen",
type = "Nettobezüge",
variable = "Median"
)
devtools::load_all()
raw_data = incomeR::read_lst_data(
dir_with_excels = here("~/projects/dst/DATEN/statistik_austria/lst_daten/"),
sex = "Zusammen",
type = "Nettobezüge",
variable = "Median"
)
devtools::load_all()
raw_data = incomeR::read_lst_data(
dir_with_excels = here("~/projects/dst/DATEN/statistik_austria/lst_daten/"),
sex = "Zusammen",
type = "Nettobezüge",
variable = "Median"
)
dir_with_excels = here("~/projects/dst/DATEN/statistik_austria/lst_daten/")
dir_with_excels = here("~/projects/dst/DATEN/statistik_austria/lst_daten/")
sex = "Zusammen"
type = "Nettobezüge"
variable = "Median"
if(is.null(dir_with_excels)){
stop("You must provide the path to the directory where all the .xlsx files are in")
}
# list all the excels -----------------------------------------------------
excel_files = dir(dir_with_excels, ".*Gem.*\\.xls[x]?$", full.names = T)
if (!length(excel_files) >= 18) {
stop("There must be at least 18 files... Maybe the wrong folder?!")
}
# read the years from the files -------------------------------------------
years = str_match(basename(excel_files), "\\d{2,4}") %>% .[, 1]
data_all = purrr::map(seq_along(excel_files), function(i) {
# the year of the data
year = years[[i]]
cli::cli_inform(glue("Reading data for year: {year}"))
cat("\n")
# read the data
data_year = readxl::read_excel(excel_files[[i]], skip = 1)
# bring the data into long format
clean_data = statistik_format_raw_lsv(data_year)
# filter
clean_data %>%
dplyr::filter(
.data$sex %in% .env$sex &
.data$type %in% .env$type &
.data$variable %in% .env$variable
) -> data_filtered
data_filtered[["year"]] = year
return(data_filtered)
})
# the year of the data
year = years[[i]]
cli::cli_inform(glue("Reading data for year: {year}"))
# the year of the data
year = years[[i]]
i = 1
# the year of the data
year = years[[i]]
cli::cli_inform(glue("Reading data for year: {year}"))
cat("\n")
# read the data
data_year = readxl::read_excel(excel_files[[i]], skip = 1)
# read the data
data_year = suppressMessages( readxl::read_excel(excel_files[[i]], skip = 1))
devtools::load_all()
raw_data = incomeR::read_lst_data(
dir_with_excels = here("~/projects/dst/DATEN/statistik_austria/lst_daten/"),
sex = "Zusammen",
type = "Nettobezüge",
variable = "Median"
)
library(tidyverse)
library(here)
library(glue)
library(sf)
library(rajudas)
library(jsonlite)
path_to_aenderungen = here("data/Gemeindeaenderungen_ab2002bis2022.xlsx")
namensaenderungen = read_xlsx(path_to_aenderungen, sheet = "Namensaenderung")
namensaenderungen
namensaenderungen = read_xlsx(path_to_aenderungen, sheet = "Namensaenderung", skip = 1)
namensaenderungen
teilungen = read_xlsc(path_to_aenderungen, sheet="Teilungen")
teilungen = read_xlsx(path_to_aenderungen, sheet="Teilungen")
teilungen
teilungen = read_xlsx(path_to_aenderungen, sheet="Teilungen", skip = 1)
teilungen
zusammenlegungen = read_xlsx(path_to_aenderungen, sheet="Zusammenlegungen", skip = 1)
zusammenlegungen
gkz_aenderungen = read_xlsx(path_to_aenderungen, sheet="GKZ Änderungen", skip = 1)
gkz_aenderungen
data_all = list(
namensaenderungen = namensaenderungen,
teilungen = teilungen,
zusammenlegungen = zusammenlegungen,
gkz_aenderungen = gkz_aenderungen
)
data_all = list(
namensaenderungen = namensaenderungen,
teilungen = teilungen,
zusammenlegungen = zusammenlegungen,
gkz_aenderungen = gkz_aenderungen
) %>% map(janitor::clean_names)
data_all = list(
namensaenderungen = namensaenderungen,
teilungen = teilungen,
zusammenlegungen = zusammenlegungen,
gkz_aenderungen = gkz_aenderungen
) %>% map(janitor::clean_names)
data_all
# get gemeinde data for 2023
gemeinden2023 = jsonlite::fromJSON("https://www.statistik.at/gs-atlas/ATLAS_IMAP_WFS/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=ATLAS_IMAP_WFS:DATA_GEM_GDB_DDT_DS_PG&outputFormat=application%2Fjson&viewparams=DDT:mv_t0278_them_bev_alter_2023;YEAR:2023-01-01;V1:bev_gesamt;V2:bev_gesamt;V1_ABS:bev_gesamt;GEN:100;V2FILTER:-1;WIENFLAG:23;")
gemeinden2023
gemeinden2023$features
# get gemeinde data for 2023
gemeinden2023 = jsonlite::fromJSON("https://www.statistik.at/gs-atlas/ATLAS_IMAP_WFS/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=ATLAS_IMAP_WFS:DATA_GEM_GDB_DDT_DS_PG&outputFormat=application%2Fjson&viewparams=DDT:mv_t0278_them_bev_alter_2023;YEAR:2023-01-01;V1:bev_gesamt;V2:bev_gesamt;V1_ABS:bev_gesamt;GEN:100;V2FILTER:-1;WIENFLAG:23;") %>% .[["features"]]
gemeinden2023
gemeinden2023 %>% head
# for each gemeinde in 2023 find the gkz(s) this gemeinde was in the past
gemeinden2023_list = gemeinden2023 %>% pmap(as.list)
gemeinden2023 %>% glimpse
# get gemeinde data for 2023
gemeinden2023 = jsonlite::fromJSON("https://www.statistik.at/gs-atlas/ATLAS_IMAP_WFS/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=ATLAS_IMAP_WFS:DATA_GEM_GDB_DDT_DS_PG&outputFormat=application%2Fjson&viewparams=DDT:mv_t0278_them_bev_alter_2023;YEAR:2023-01-01;V1:bev_gesamt;V2:bev_gesamt;V1_ABS:bev_gesamt;GEN:100;V2FILTER:-1;WIENFLAG:23;") %>% .[["features"]] %>%
unnest(properties)
gemeinden2023
gemeinden2023 %>% glimpse
# get gemeinde data for 2023
gemeinden2023 = jsonlite::fromJSON("https://www.statistik.at/gs-atlas/ATLAS_IMAP_WFS/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=ATLAS_IMAP_WFS:DATA_GEM_GDB_DDT_DS_PG&outputFormat=application%2Fjson&viewparams=DDT:mv_t0278_them_bev_alter_2023;YEAR:2023-01-01;V1:bev_gesamt;V2:bev_gesamt;V1_ABS:bev_gesamt;GEN:100;V2FILTER:-1;WIENFLAG:23;") %>% .[["features"]] %>%
unnest(properties) %>%
select(gkz=ID, name=NAME)
gemeinden2023
# for each gemeinde in 2023 find the gkz(s) this gemeinde was in the past
gemeinden2023_list = gemeinden2023 %>% split(gkz)
# for each gemeinde in 2023 find the gkz(s) this gemeinde was in the past
gemeinden2023_list = gemeinden2023 %>% split(.$gkz)
gemeinden2023_list$10101
gemeinden2023_list$`10101`
gkz = 10101
x = data_all[[1]]
x
x %>% glimpse
namensaenderungen = data_all$namensaenderungen
namensaenderungen
namensaenderungen %>%
filter(gkz %in% gemeindekennziffer)
aenderungen = namensaenderungen %>%
filter(gkz %in% gemeindekennziffer)
aenderungen
nrow(aenderungen)
namensaenderungen
namensaenderungen %>% count(gemeindekennziffer)
namensaenderungen %>% count(gemeindekennziffer, sort = T)
gkz = 70604
aenderungen = namensaenderungen %>%
filter(gkz %in% gemeindekennziffer)
aenderungen
gkz
aenderungen = namensaenderungen %>%
filter(gkz == gemeindekennziffer)
gkz
aenderungen
zusammenlegungen = zusammenlegungen %>%
filter(gkz == gemeindekennziffer)
zusammenlegungen %>% glimpse()
data_all = list(
namensaenderungen = namensaenderungen,
teilungen = teilungen,
zusammenlegungen = zusammenlegungen,
gkz_aenderungen = gkz_aenderungen
) %>% map(janitor::clean_names)
data_all$zusammenlegungen
data_all$zusammenlegungen %>% glimpse
zusammenlegungen = zusammenlegungen %>%
filter(
gkz == gemeindekennziffer_neu
)
zusammenlegungen = data_all$zusammenlegungen
zusammenlegungen = zusammenlegungen %>%
filter(
gkz == gemeindekennziffer_neu
)
zusammenlegungen
zusammenlegungen_all = data_all$zusammenlegungen
zusammenlegungen = zusammenlegungen_all %>%
filter(
gkz == gemeindekennziffer_neu
)
zusammenlegungen
zusammenlegungen_all %>% count(gemeindekennziffer_neu, sort=T)
gkz = 62380
zusammenlegungen = zusammenlegungen_all %>%
filter(
gkz == gemeindekennziffer_neu
)
zusammenlegungen
zusammenlegungen %>% View
zusammenlegungen_all %>% count(gemeindekennziffer_neu, in_kraft_seit, sort=T)
zusammenlegungen_all
zusammenlegungen_all %>% distinct(in_kraft_seit, .keep_all = T) %>% count(gemeindename_neu, sort=T)
zusammenlegungen_all %>% distinct(in_kraft_seit, .keep_all = T) %>% count(gemeindekennziffer_neu, sort=T)
gkz = 62388
zusammenlegungen = zusammenlegungen_all %>%
filter(
gkz == gemeindekennziffer_neu
)
zusammenlegungen
zusammenlegungen %>% View()
gkz
gkz_aenderungen = data_all$gkz_aenderungen
gkz_aenderungen_all = data_all$gkz_aenderungen
gkz_aenderungen = gkz_aenderungen_all %>%
mutate(year = lubridate::year(in_kraft_seit)) %>%
filter(gkz == gemeindekennziffer_neu)
gkz_aw
gkz_aenderungen
gkz = 60345
# check if that gemeinde had any namensänderung
old_names = get_names(gkz, data_all$namensaenderungen)
devtools::load_all()
# check if that gemeinde had any namensänderung
old_names = get_names(gkz, data_all$namensaenderungen)
old_names
# check which old gemeinden build this gemeinde in 2023
old_zusammenlegungen = get_zusammenlegungen(gkz, data_all$zusammenlegungen)
old_zusammenlegungen
# check which old gemeinden build this gemeinde in 2023
zusammenlegungen = get_zusammenlegungen(gkz, data_all$zusammenlegungen)
zusammenlegungen
gemeinden2023$gkz == 60345
which(gemeinden2023$gkz == 60345)
gkz
# check if that gemeinde had any namensänderung
old_names = get_names(gkz, data_all$namensaenderungen)
# check which old gemeinden build this gemeinde in 2023
zusammenlegungen = get_zusammenlegungen(gkz, data_all$zusammenlegungen)
zusammenlegungen
# check if the gkz was changed at some point
gkz_aenderungen = get_gkz_aenderungen(gkz, data_all$gkz_aenderungen)
gkz_aenderungen
gkz
which(gemeinden2023$gkz == 60345)
gkz = gemeinden2023_list[[1443]]
gkz
years_range = 2004:2022
# theoretical data for all years the same
theoretical = data.frame(
year = years_range
)
theoretical
# theoretical data for all years the same
theoretical = dplyr::tibble(
year = years_range,
)
theoretical
# theoretical data for all years the same
theoretical = dplyr::tibble(
year = years_range,
gkz
)
theoretical
# theoretical data for all years the same
theoretical = dplyr::tibble(
year = years_range,
gkz
)
theoretical
left_join(theoretical, zusammenlegungen)
zusammenlegungen
zusammenlegungen %>% glimpse
zusammenlegungen
zusammenlegungen$gemeindekennziffer_alt %in% zusammenlegungen_all$gemeindename_neu
zusammenlegungen
zusammenlegungen = zusammenlegungen_all %>%
mutate(year = lubridate::year(in_kraft_seit)) %>%
filter(gkz == gemeindekennziffer_neu) %>% map(list)
gkz
gkz=60345
zusammenlegungen = zusammenlegungen_all %>%
mutate(year = lubridate::year(in_kraft_seit)) %>%
filter(gkz == gemeindekennziffer_neu) %>% map(list)
zusammenlegungen
gkz
gkz = 10101
zusammenlegungen = zusammenlegungen_all %>%
mutate(year = lubridate::year(in_kraft_seit)) %>%
filter(gkz == gemeindekennziffer_neu) %>% map(list)
zusammenlegungen
zusammenlegungen %>% length
gkz = 60345
zusammenlegungen = zusammenlegungen_all %>%
mutate(year = lubridate::year(in_kraft_seit)) %>%
filter(gkz == gemeindekennziffer_neu) %>% map(list)
zusammenlegungen$gemeindekennziffer_neu
zusammenlegungen
zusammenlegungen = zusammenlegungen_all %>%
mutate(year = lubridate::year(in_kraft_seit)) %>%
filter(gkz == gemeindekennziffer_neu) %>% map(list)
zusammenlegungen
zusammenlegungen = zusammenlegungen_all %>%
mutate(year = lubridate::year(in_kraft_seit)) %>%
filter(gkz == gemeindekennziffer_neu) %>% %>% split(.$gemeindekennziffer_alt)
zusammenlegungen = zusammenlegungen_all %>%
mutate(year = lubridate::year(in_kraft_seit)) %>%
filter(gkz == gemeindekennziffer_neu) %>% split(.$gemeindekennziffer_alt)
gkz = 10101
zusammenlegungen = zusammenlegungen_all %>%
mutate(year = lubridate::year(in_kraft_seit)) %>%
filter(gkz == gemeindekennziffer_neu) %>% split(.$gemeindekennziffer_alt)
zusammenlegungen
zusammenlegungen %>% length
gkz = 60345
zusammenlegungen = zusammenlegungen_all %>%
mutate(year = lubridate::year(in_kraft_seit)) %>%
filter(gkz == gemeindekennziffer_neu) %>% split(.$gemeindekennziffer_alt)
zusammenlegungen$60301
zusammenlegungen$`60301`
g = zusammenlegungen[[1]]
g
# if there have been zusammenlegungen in the past
map(zusammenlegungen, function(g){get_zusammenlegungen(g$gemeindekennziffer_alt, zusammenlegungen_all)})
# if there have been zusammenlegungen in the past
old = map(zusammenlegungen, function(g){get_zusammenlegungen(g$gemeindekennziffer_alt, zusammenlegungen_all)})
old
zusammenlegungen
# if there have been zusammenlegungen in the past
old = map(zusammenlegungen, function(g){get_zusammenlegungen(g$gemeindekennziffer_alt, zusammenlegungen_all)}) %>%
bind_rows()
old
# if there have been zusammenlegungen in the past
old = map(zusammenlegungen, function(g){get_zusammenlegungen(g$gemeindekennziffer_alt, zusammenlegungen_all)})
old
# each sheet
namensaenderungen = read_xlsx(path_to_aenderungen, sheet = "Namensaenderung", skip = 1)
teilungen = read_xlsx(path_to_aenderungen, sheet="Teilungen", skip = 1)
zusammenlegungen = read_xlsx(path_to_aenderungen, sheet="Zusammenlegungen", skip = 1)
gkz_aenderungen = read_xlsx(path_to_aenderungen, sheet="GKZ Änderungen", skip = 1)
data_all = list(
namensaenderungen = namensaenderungen,
teilungen = teilungen,
zusammenlegungen = zusammenlegungen,
gkz_aenderungen = gkz_aenderungen
) %>% map(janitor::clean_names)
data_all$zusammenlegungen
# each sheet
namensaenderungen = read_xlsx(path_to_aenderungen, sheet = "Namensaenderung", skip = 1)
teilungen = read_xlsx(path_to_aenderungen, sheet="Teilungen", skip = 1)
zusammenlegungen = read_xlsx(path_to_aenderungen, sheet="Zusammenlegungen", skip = 1)
gkz_aenderungen = read_xlsx(path_to_aenderungen, sheet="GKZ Änderungen", skip = 1)
data_all = list(
namensaenderungen = namensaenderungen,
teilungen = teilungen,
zusammenlegungen = zusammenlegungen,
gkz_aenderungen = gkz_aenderungen
) %>% map(janitor::clean_names)
data_all
data_all$zusammenlegungen
gemeinden2023$gkz == 62205
which(gemeinden2023$gkz == 62205)
gkz = gemeinden2023_list[[1660]]
# theoretical data for all years the same
theoretical = dplyr::tibble(
year = years_range,
gkz
)
# check if that gemeinde had any namensänderung
old_names = get_names(gkz$gkz, data_all$namensaenderungen)
# theoretical data for all years the same
theoretical = dplyr::tibble(
year = years_range,
gkz
)
# check if that gemeinde had any namensänderung
old_names = get_names(gkz$gkz, data_all$namensaenderungen)
gkz
data_all$namensaenderungen
zusammenlegungen_all = data_all$zusammenlegungen
zusammenlegungen
zusammenlegungen = zusammenlegungen_all %>%
mutate(year = lubridate::year(in_kraft_seit)) %>%
filter(gkz == gemeindekennziffer_neu) %>% split(.$gemeindekennziffer_alt)
gkz = gkz$gkz
gkz
zusammenlegungen = zusammenlegungen_all %>%
mutate(year = lubridate::year(in_kraft_seit)) %>%
filter(gkz == gemeindekennziffer_neu) %>% split(.$gemeindekennziffer_alt)
zusammenlegungen
# if there have been no zusammenlegungen
if (length(zusammenlegungen) == 0) {
return(NA)
}
# if there have been zusammenlegungen in the past
old = map(zusammenlegungen, function(g){get_zusammenlegungen(g$gemeindekennziffer_alt, zusammenlegungen_all)})
ol
old
# each sheet
namensaenderungen = read_xlsx(path_to_aenderungen, sheet = "Namensaenderung", skip = 1)
teilungen = read_xlsx(path_to_aenderungen, sheet="Teilungen", skip = 1)
zusammenlegungen = read_xlsx(path_to_aenderungen, sheet="Zusammenlegungen", skip = 1)
gkz_aenderungen = read_xlsx(path_to_aenderungen, sheet="GKZ Änderungen", skip = 1)
data_all = list(
namensaenderungen = namensaenderungen,
teilungen = teilungen,
zusammenlegungen = zusammenlegungen,
gkz_aenderungen = gkz_aenderungen
) %>% map(janitor::clean_names)
zusammenlegungen_all = data_all$zusammenlegungen
zusammenlegungen_all
gkz
zusammenlegungen = zusammenlegungen_all %>%
mutate(year = lubridate::year(in_kraft_seit)) %>%
filter(gkz == gemeindekennziffer_neu) %>% split(.$gemeindekennziffer_alt)
zusammenlegungen
# if there have been no zusammenlegungen
if (length(zusammenlegungen) == 0) {
return(NA)
}
# if there have been zusammenlegungen in the past
old = map(zusammenlegungen, function(g){get_zusammenlegungen(g$gemeindekennziffer_alt, zusammenlegungen_all)})
old
zusammenlegungen
# Sample dataframe
data <- data.frame(
date = c("2023-08-01", "2023-08-02", "2023-08-03", "2023-08-04", "2023-08-05"),
old_id = c("A", "B", "C", "D", "E"),
new_id = c("B", "C", "D", "E", "F")
)
data
unique_ids <- unique(c(data$old_id, data$new_id))
unique_ids
history <- list()
history
id = unique_ids[[1]]
history[[id]] <- vector("character", length(data$date))
history$A
history[[id]][length(data$date)] <- id
history$A
# Get the history of changes
history <- trace_history(data)
# Sample dataframe
data <- data.frame(
date = c("2023-08-01", "2023-08-02", "2023-08-03", "2023-08-04", "2023-08-05"),
old_id = c("A", "B", "C", "D", "E"),
new_id = c("B", "C", "D", "E", "F")
)
# Function to trace the history of changes
trace_history <- function(data) {
unique_ids <- unique(c(data$old_id, data$new_id))
history <- list()
for (id in unique_ids) {
history[[id]] <- vector("character", length(data$date))
history[[id]][length(data$date)] <- id
}
for (i in (nrow(data) - 1):1) {
old_ids <- data$new_id[i]
new_ids <- data$old_id[i]
for (j in 1:length(old_ids)) {
old_id <- old_ids[j]
new_id <- new_ids[j]
history[[old_id]][i] <- history[[new_id]][i + 1]
}
}
return(history)
}
# Get the history of changes
history <- trace_history(data)
history
# Sample dataframe with a more complex history
data <- data.frame(
date = c("2023-08-01", "2023-08-02", "2023-08-03", "2023-08-04", "2023-08-05"),
old_id = c("B&C", "E&F&G", "E&F&G", "B&C", "A"),
new_id = c("A", "B", "C", "D", "E")
)
# Function to trace the history of changes
trace_history <- function(data) {
unique_ids <- unique(c(data$old_id, data$new_id))
history <- list()
for (id in unique_ids) {
history[[id]] <- vector("list", length(data$date))
history[[id]][length(data$date)] <- list(id)
}
for (i in (nrow(data) - 1):1) {
old_ids <- unlist(strsplit(data$new_id[i], "&"))
new_ids <- unlist(strsplit(data$old_id[i], "&"))
for (j in 1:length(old_ids)) {
old_id <- old_ids[j]
new_id <- new_ids[j]
history[[old_id]][i] <- history[[new_id]][i + 1]
}
}
return(history)
}
# Get the history of changes
history <- trace_history(data)
history
history$`B&C`
gkz
zusammenlegungen_all %>%
filter(gemeindekennziffer_neu == gkz)
newest_zusammenlegung = zusammenlegungen_all %>%
filter(gemeindekennziffer_neu == gkz)
newest_zusammenlegung = zusammenlegungen_all %>%
filter(gemeindekennziffer_neu == gkz) %>% split(.$gemeindekennziffer_alt)
newest_zusammenlegung
