mutate(val_real = if_else(variable == "Anzahl", val, round(val / (index_2022 / 100),2))) %>%
select(year, gkz_current, name,  val_real, variable) %>%
pivot_wider(names_from = variable,
values_from = val_real) -> data_clean
return(data_clean)
})
# -------------------------------------------------------------------------
# get the weighted quantiles ----------------------------------------------
# -------------------------------------------------------------------------
data_agg = map(seq_along(data_top_low_adjusted), function(i) {
d_adj = data_top_low_adjusted[[i]]
name = d_adj %>% filter(year == 2022) %>% pull(name)
d_adj %>%
group_by(year, gkz_current) %>%
summarise(across(Median:P90, function(x) {
round(weighted.mean(x, Anzahl), 2)
}),
agg = if_else(n() > 1, "1", "")) %>% ungroup() -> d_adj_agg
return(d_adj_agg)
})
data_agg[[1]]
data_agg[[1]]$P10
data_each_bl = processBlData(path = "~/projects/dst/DATEN/statistik_austria/lst_daten/AN_gjvz_BL_2004-2022.xlsx", sex=sex,type=type, variable=variable)
data_bls = data_each_bl %>%
select(gkz_current=id,val_real, variable,year) %>%
pivot_wider(names_from = variable,values_from = val_real) %>%
select(-Anzahl) %>%
filter(!is.na(gkz_current)) %>%
mutate(
year=as.numeric(year)
)
data_bls$P10
cols_def = c("gkz" = as.character, "year" = as.numeric, "P10" = as.numeric, "P20" = as.numeric, "Median" = as.numeric, "P80" = as.numeric, "P90" = as.numeric, "agg" = as.character)
data.table::rbindlist(data_agg) %>%
rename(gkz=gkz_current) %>%
ungroup() %>%
select(all_of(names(cols_def)), agg) %>%
imap(function(d, nm){
d = cols_def[[nm]](d)
return(d)
}) %>%  bind_cols() -> data_gemeinden
data_bls %>%
rename(gkz = gkz_current) %>%
mutate(agg = "") %>%
select(all_of(names(cols_def))) %>%
imap(function(d, nm) {
d = cols_def[[nm]](d)
return(d)
}) %>%  bind_cols() -> data_bls_clean
data_all = bind_rows(data_gemeinden, data_bls) %>%
rename(jahr = year) %>%
rename_with(function(x) {
return(paste0(x, "_real"))
}, P10:P90) %>%
janitor::clean_names()
# -------------------------------------------------------------------------
# write out ---------------------------------------------------------------
# -------------------------------------------------------------------------
data_p90_p10 = data_all %>% select(gkz, jahr, p10_real, median_real, p90_real, agg)
data_p80_p20 = data_all %>% select(gkz, jahr, p20_real, median_real, p80_real, agg)
data_all_list = list(median_p90_p10 = data_p90_p10, median_p80_p20  = data_p80_p20)
iwalk(data_all_list, function(d, name_mode) {
data_split = d %>% split(.$gkz)
iwalk(data_split, function(d_gem, name_gem) {
op = makePath(here(glue(
"output/article1/{name_mode}/{name_gem}.csv"
)))
data.table::fwrite(d_gem, op)
})
})
devtools::load_all()
data_each_bl$val_real
data_each_bl$val_real %>% tail
View(data_each_bl)
data_each_bl = processBlData(path = "~/projects/dst/DATEN/statistik_austria/lst_daten/AN_gjvz_BL_2004-2022.xlsx", sex=sex,type=type, variable=variable)
data_bls = data_each_bl %>%
select(gkz_current=id,val_real, variable,year) %>%
pivot_wider(names_from = variable,values_from = val_real) %>%
select(-Anzahl) %>%
filter(!is.na(gkz_current)) %>%
mutate(
year=as.numeric(year)
)
data_bls$P10
cols_def = c("gkz" = as.character, "year" = as.numeric, "P10" = as.numeric, "P20" = as.numeric, "Median" = as.numeric, "P80" = as.numeric, "P90" = as.numeric, "agg" = as.character)
data.table::rbindlist(data_agg) %>%
rename(gkz=gkz_current) %>%
ungroup() %>%
select(all_of(names(cols_def)), agg) %>%
imap(function(d, nm){
d = cols_def[[nm]](d)
return(d)
}) %>%  bind_cols() -> data_gemeinden
data_bls %>%
rename(gkz = gkz_current) %>%
mutate(agg = "") %>%
select(all_of(names(cols_def))) %>%
imap(function(d, nm) {
d = cols_def[[nm]](d)
return(d)
}) %>%  bind_cols() -> data_bls_clean
data_all = bind_rows(data_gemeinden, data_bls) %>%
rename(jahr = year) %>%
rename_with(function(x) {
return(paste0(x, "_real"))
}, P10:P90) %>%
janitor::clean_names()
# -------------------------------------------------------------------------
# write out ---------------------------------------------------------------
# -------------------------------------------------------------------------
data_p90_p10 = data_all %>% select(gkz, jahr, p10_real, median_real, p90_real, agg)
data_p90_p10$p90_real
data_p80_p20 = data_all %>% select(gkz, jahr, p20_real, median_real, p80_real, agg)
data_all_list = list(median_p90_p10 = data_p90_p10, median_p80_p20  = data_p80_p20)
iwalk(data_all_list, function(d, name_mode) {
data_split = d %>% split(.$gkz)
iwalk(data_split, function(d_gem, name_gem) {
op = makePath(here(glue(
"output/article1/{name_mode}/{name_gem}.csv"
)))
data.table::fwrite(d_gem, op)
})
})
View(data_p90_p10)
data_all = bind_rows(data_gemeinden, data_bls_clean) %>%
rename(jahr = year) %>%
rename_with(function(x) {
return(paste0(x, "_real"))
}, P10:P90) %>%
janitor::clean_names()
data_bls_clean
data_bls_clean$P10
data.table::rbindlist(data_agg) %>%
rename(gkz=gkz_current) %>%
ungroup() %>%
select(all_of(names(cols_def)), agg) %>%
imap(function(d, nm){
d = cols_def[[nm]](d)
return(d)
}) %>%  bind_cols() -> data_gemeinden_clean
data_bls %>%
rename(gkz = gkz_current) %>%
mutate(agg = "") %>%
select(all_of(names(cols_def))) %>%
imap(function(d, nm) {
d = cols_def[[nm]](d)
return(d)
}) %>%  bind_cols() -> data_bls_clean
data_all = bind_rows(data_gemeinden_clean, data_bls_clean) %>%
rename(jahr = year) %>%
rename_with(function(x) {
return(paste0(x, "_real"))
}, P10:P90) %>%
janitor::clean_names()
# -------------------------------------------------------------------------
# write out ---------------------------------------------------------------
# -------------------------------------------------------------------------
data_p90_p10 = data_all %>% select(gkz, jahr, p10_real, median_real, p90_real, agg)
data_p80_p20 = data_all %>% select(gkz, jahr, p20_real, median_real, p80_real, agg)
data_all_list = list(median_p90_p10 = data_p90_p10, median_p80_p20  = data_p80_p20)
iwalk(data_all_list, function(d, name_mode) {
data_split = d %>% split(.$gkz)
iwalk(data_split, function(d_gem, name_gem) {
op = makePath(here(glue(
"output/article1/{name_mode}/{name_gem}.csv"
)))
data.table::fwrite(d_gem, op)
})
})
iwalk(data_all_list, function(d, name_mode) {
data_split = d %>% split(.$gkz)
iwalk(data_split, function(d_gem, name_gem) {
d = d_gem %>% select(-gkz)
op = makePath(here(glue(
"output/article1/{name_mode}/{name_gem}.csv"
)))
data.table::fwrite(d, op)
})
})
library(tidyverse)
library(here)
library(glue)
library(sf)
library(rajudas)
library(jsonlite)
# gems 22 -----------------------------------------------------------------
gems_22 = rajudas::oe_gem_data(2022)
gems_22 %>%
st_drop_geometry()
gems_22 %>%
st_drop_geometry() %>%
rename(gkz=id)
op = makePath(here("output/article1/gemeindekennzahlen.csv"))
write_csv(d, op)
library(tidyverse)
library(here)
library(glue)
library(sf)
library(rajudas)
library(jsonlite)
# gems 22 -----------------------------------------------------------------
gems_22 = rajudas::oe_gem_data(2022)
d = gems_22 %>%
st_drop_geometry() %>%
rename(gkz=id)
d
op = makePath(here("output/article1/gemeindekennzahlen.csv"))
write_csv(d, op)
library(tidyverse)
library(here)
library(glue)
library(sf)
library(rajudas)
library(jsonlite)
# loading this package
devtools::load_all()
# consts for income data
sex = c("Zusammen")
type = c("Nettobezüge")
variable = c("Median")
# consts for gemeindeänderungen
current_year_gemeinden = 2022
path_to_gem_aenderungen = here("~/projects/dst/DATEN/statistik_austria/Gemeindeaenderungen_ab2002bis2022.xlsx")
dir_with_excels_to_gemeindedaten = here("~/projects/dst/DATEN/statistik_austria/lst_daten/")
path_excel_bls = here("~/projects/dst/DATEN/statistik_austria/lst_daten/AN_gjvz_BL_2004-2022.xlsx")
# get the data ------------------------------------------------------------
raw_data = incomeR::read_lst_data(
dir_with_excels = dir_with_excels_to_gemeindedaten,
sex = sex,
type = type,
variable = variable,
out_dir = out_dir_lst_data
)
# bind all the years together
raw_data = bind_rows(raw_data)
# data for 2022 -----------------------------------------------------------
raw_data %>%
filter(year == "22") %>%
filter(str_detect(gkz, "\\d{5}")) -> median_netto_2022_zusammen
# get the names -----------------------------------------------------------
gems2022 = rajudas::oe_gem_data(2022) %>% st_drop_geometry()
gems2022
raw_da
# consts for income data
sex = c("Zusammen"
)
type = c("Nettobezüge")
# consts for income data
sex = c("Zusammen")
type = c("Nettobezüge")
variable = c("Median")
# consts for gemeindeänderungen
current_year_gemeinden = 2022
path_to_gem_aenderungen = here("~/projects/dst/DATEN/statistik_austria/Gemeindeaenderungen_ab2002bis2022.xlsx")
dir_with_excels_to_gemeindedaten = here("~/projects/dst/DATEN/statistik_austria/lst_daten/")
path_excel_bls = here("~/projects/dst/DATEN/statistik_austria/lst_daten/AN_gjvz_BL_2004-2022.xlsx")
# get the data ------------------------------------------------------------
raw_data = incomeR::read_lst_data(
dir_with_excels = dir_with_excels_to_gemeindedaten,
sex = sex,
type = type,
variable = variable,
out_dir = out_dir_lst_data
)
out_dir_lst_data = here("processed_lst_data/")
# get the data ------------------------------------------------------------
raw_data = incomeR::read_lst_data(
dir_with_excels = dir_with_excels_to_gemeindedaten,
sex = sex,
type = type,
variable = variable,
out_dir = out_dir_lst_data
)
# bind all the years together
raw_data = bind_rows(raw_data)
# data for 2022 -----------------------------------------------------------
raw_data %>%
filter(year == "22") %>%
filter(str_detect(gkz, "\\d{5}")) -> median_netto_2022_zusammen
# get the names -----------------------------------------------------------
gems2022 = rajudas::oe_gem_data(2022) %>% st_drop_geometry()
df_final = left_join(gems2022, median_netto_2022_zusammen, join_by(id == gkz))
# write out ---------------------------------------------------------------
op_median_2022_zusammen = makePath(here("output/article1/median_netto_zusammen_2022.csv"))
op_median_2022_zusammen
df_final
df_final = anti_join(gems2022, median_netto_2022_zusammen, join_by(id == gkz))
df_final
# get the names -----------------------------------------------------------
gems2022 = rajudas::oe_gem_data(2022)
df_final = left_join(gems2022, median_netto_2022_zusammen, join_by(id == gkz))
df_final
# make tileset for 2022 ---------------------------------------------------
op_tileset_2022 = "~/Desktop/median_2022.gpkg"
# make tileset for 2022 ---------------------------------------------------
op_tileset_2022 = "~/Desktop/median_2022.gpkg"
write_sf(df_final, op_tileset_2022)
df_final
df_final
df_final %>%
select(gkz=id, name, median_real=val)
df_tileset = df_final %>%
select(gkz=id, name, median_real=val)
df_tileset
df_tileset = df_final %>%
select(gkz=id, name, median_real=val) %>%
mutate(
median_real = round(median_real, 2)
)
df_tileset = df_final %>%
select(gkz=id, name, median_real=val) %>%
mutate(
median_real = round(median_real, 2)
)
df_tileset = df_final %>%
select(gkz=id, name, median_real=val) %>%
mutate(
median_real = as.numeric(median_real),
median_real = round(median_real, 2)
)
df_tileset
readlines("~/.ssh/mapbox")
read_lines("~/.ssh/mapbox")
key = read_lines("~/.ssh/mapbox")
key
cmd = glue("tilesets list-sources {user}")
# -------------------------------------------------------------------------
# list all sources
# -------------------------------------------------------------------------
user="derstandardat"
key = read_lines("~/.ssh/mapbox")
cmd = glue("tilesets list-sources {user}")
cmd
system(cmd)
Sys.setenv(MAPBOX_ACCESS_TOKEN=key)
cmd = glue("tilesets list-sources {user}")
system(cmd)
# -------------------------------------------------------------------------
# list all sources
# -------------------------------------------------------------------------
user="derstandardat"
key = read_lines("~/.ssh/mapbox")
Sys.setenv(MAPBOX_ACCESS_TOKEN=key)
cmd = glue("tilesets list-sources {user}")
system(cmd)
key
# -------------------------------------------------------------------------
# list all sources
# -------------------------------------------------------------------------
user="derstandardat"
key = read_lines("~/.ssh/mapbox")
Sys.setenv(MAPBOX_ACCESS_TOKEN=key)
cmd = glue("tilesets list-sources {user}")
system(cmd)
# -------------------------------------------------------------------------
# create tileset source
# -------------------------------------------------------------------------
base_name = "gemeinden_einkommen_median_real_2022"
df_tileset
op_tileset_geo = makePath(here("output/article1/tileset_geo/gemeinden_einkommen_median_real_2022.geojson"))
op_tileset_geo = makePath(here("output/article1/tileset_geo/gemeinden_einkommen_median_real_2022.geojson"))
df_tileset %>% st_transform("EPSG:4326") %>% write_sf(op_tileset_geo)
file = op_tileset_geo
tileset_source_cmd = glue("tilesets upload-source --replace {user} {name_tileset} {op_tileset_geo}")
# -------------------------------------------------------------------------
# create tileset source
# -------------------------------------------------------------------------
name_tileset = "gemeinden_einkommen_median_real_2022"
tileset_source_cmd = glue("tilesets upload-source --replace {user} {name_tileset} {op_tileset_geo}")
tileset_source_cmd
# -------------------------------------------------------------------------
# create recipe
# -------------------------------------------------------------------------
# read recilpe
path_json_recipe = here("analysis/article1/tileset_einkommen_2022.json")
jsonlite::read_json(path_json_recipe)
jsonlite::fromJSON(path_json_recipe)
# -------------------------------------------------------------------------
# create recipe
# -------------------------------------------------------------------------
# read recilpe
path_json_recipe = here("analysis/article1/tileset_einkommen_2022.json")
jsonlite::fromJSON(path_json_recipe)
path_json_recipe
# -------------------------------------------------------------------------
# create recipe
# -------------------------------------------------------------------------
# read recilpe
path_json_recipe = here("analysis/article1/tileset_einkommen_2022.json")
jsonlite::fromJSON(path_json_recipe)
jsonlite::fromJSON(path_json_recipe) %>% jsonlite::toJSON()
# -------------------------------------------------------------------------
# publish empty tileset
# -------------------------------------------------------------------------
glue("tilesets create {user}.{name_tileset} --recipe --name 'gemeinden_einkommen_median_real_2022'")
# -------------------------------------------------------------------------
# publish empty tileset
# -------------------------------------------------------------------------
create_cmd = glue("tilesets create {user}.{name_tileset} --recipe --name 'gemeinden_einkommen_median_real_2022'")
create_cmd
# -------------------------------------------------------------------------
# create empty tileset
# -------------------------------------------------------------------------
create_cmd = glue("tilesets create {user}.{name_tileset} --recipe --name 'gemeinden_einkommen_median_real_2022'")
create_cmd
# -------------------------------------------------------------------------
# publish empty tileset
# -------------------------------------------------------------------------
publish_cmd = glue("tilesets publish {user}.{name_tileset}")
publish_cmd
# -------------------------------------------------------------------------
# list all existing sources
# -------------------------------------------------------------------------
user="derstandardat"
key = read_lines("~/.ssh/mapbox")
Sys.setenv(MAPBOX_ACCESS_TOKEN=key)
cmd = glue("tilesets list-sources {user}")
cmd
list_cmd = glue("tilesets list-sources {user}")
system(list_cmd)
# -------------------------------------------------------------------------
# create tileset source
# -------------------------------------------------------------------------
name_tileset = "gemeinden_einkommen_median_real_2022"
name_tileset
tileset_source_cmd = glue("tilesets upload-source --replace {user} {name_tileset} {op_tileset_geo}")
tileset_source_cmd
name_tileset
# -------------------------------------------------------------------------
# list all existing sources
# -------------------------------------------------------------------------
user="derstandardat"
key = read_lines("~/.ssh/mapbox")
Sys.setenv(MAPBOX_ACCESS_TOKEN=key)
list_cmd = glue("tilesets list-sources {user}")
system(list_cmd)
# -------------------------------------------------------------------------
# create tileset source
# -------------------------------------------------------------------------
name_tileset = "gemeinden_einkommen_median_real_2022"
tileset_source_cmd = glue("tilesets upload-source --replace {user} {name_tileset} {op_tileset_geo}")
system(tileset_source_cmd)
op_tileset_2022
op_tileset_geo
name_tileset
dir_geo = basename(op_tileset_2022)
dir_geo
dir_geo = dirname(op_tileset_2022)
dir_geo
op_tileset_geo
dir_geo
dir_geo = dirname(op_tileset_2022)
dir_geo
op_tileset_geo
op_tileset_geo %>% dirname()
dir_geo = dirname(op_tileset_geo)
dir_geo
setwd(dir_geo)
getwd()
op_tileset_geo
op_tileset_geo %>% basename
tileset_source_cmd = glue("tilesets upload-source --replace {user} {name_tileset} {basename(op_tileset_geo)}")
tileset_source_cmd
system(tileset_source_cmd)
# -------------------------------------------------------------------------
# create tileset source
# -------------------------------------------------------------------------
name_tileset = "gemeinden_einkommen_2022"
dir_geo = dirname(op_tileset_geo)
setwd(dir_geo)
tileset_source_cmd = glue("tilesets upload-source --replace {user} {name_tileset} {basename(op_tileset_geo)}")
tileset_source_cmd
system(tileset_source_cmd)
list_cmd = glue("tilesets list-sources {user}")
system(list_cmd)
# -------------------------------------------------------------------------
# create (read) recipe
# -------------------------------------------------------------------------
# read recilpe
path_json_recipe = here("analysis/article1/tileset_einkommen_2022.json")
path_json_recipe
# -------------------------------------------------------------------------
# create empty tileset
# -------------------------------------------------------------------------
create_cmd = glue("tilesets create {user}.{name_tileset} --recipe {path_json_recipe} --name 'gemeinden_einkommen_median_real_2022'")
create_cmd
# -------------------------------------------------------------------------
# create empty tileset
# -------------------------------------------------------------------------
create_cmd = glue("tilesets create {user}.{name_tileset} --recipe {path_json_recipe} --name 'gemeinden_einkommen_median_real_2022'")
system(create_cmd)
# -------------------------------------------------------------------------
# create (read) recipe
# -------------------------------------------------------------------------
# read recilpe
path_json_recipe = here("analysis/article1/tileset_einkommen_2022.json")
# -------------------------------------------------------------------------
# create empty tileset
# -------------------------------------------------------------------------
create_cmd = glue("tilesets create {user}.{name_tileset} --recipe {path_json_recipe} --name 'gemeinden_einkommen_median_real_2022'")
system(create_cmd)
# -------------------------------------------------------------------------
# publish empty tileset
# -------------------------------------------------------------------------
publish_cmd = glue("tilesets publish {user}.{name_tileset}")
publish_cmd
publish_cmd
system(publish_cmd)
install.packages("palmerpenguins")
palmerpenguins::penguins
pens = palmerpenguins::penguins
write_csv(pens, "~/Downloads/pens.csv")
