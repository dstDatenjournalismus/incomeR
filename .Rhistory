a
a %>% arrange(desc(val_real))
data_real_all
all = data_real_all %>% bind_rows()
dim(all)
all %>% glimpse
d = all %>% select(gkz_current, name, val, val_real, index_2022)
d
write_csv(d, "~/Desktop/allvals.csv")
devtools::load_all()
# one file for all gemeinden
data_all_years_gems = data_real_all %>% bind_rows()
data_all_years_gems
# one file for all gemeinden
data_all_years_gems = data_real_all %>% bind_rows() %>%
select(gkz = gkz_current, year, val, val_real)
data_all_years_gems
# one file for all gemeinden
data_all_years_gems = data_real_all %>% bind_rows() %>%
select(gkz = gkz_current, name, year, val, val_real)
op_all = "~/projects/dst/2023/setembro/2023-09-einkommens-karte/public/data/all_gems_years.csv"
write_csv(data_all_years_gems, op_all)
library(tidyverse)
library(here)
library(glue)
library(sf)
library(rajudas)
library(jsonlite)
# loading this package
devtools::load_all()
# consts for income data
sex = c("Zusammen")
type = c("Nettobezüge")
variable = c("Median")
variable = c("p10", "p50", "p90")
# consts for gemeindeänderungen
current_year_gemeinden = 2022
path_to_gem_aenderungen = here("~/projects/dst/DATEN/statistik_austria/Gemeindeaenderungen_ab2002bis2022.xlsx")
dir_with_excels_to_gemeindedaten = here("~/projects/dst/DATEN/statistik_austria/lst_daten/")
path_excel_bls = here("~/projects/dst/DATEN/statistik_austria/lst_daten/AN_gjvz_BL_2004-2022.xlsx")
# where to save the processed lst data
out_dir_lst_data = here("processed_lst_data/")
raw_data = incomeR::read_lst_data(
dir_with_excels = dir_with_excels_to_gemeindedaten,
sex = sex,
type = type,
variable = variable,
out_dir = out_dir_lst_data
)
raw_data$04
raw_data$`04```
raw_data$`04`
variable = c("P10", "P50", "P90")
# consts for gemeindeänderungen
current_year_gemeinden = 2022
path_to_gem_aenderungen = here("~/projects/dst/DATEN/statistik_austria/Gemeindeaenderungen_ab2002bis2022.xlsx")
dir_with_excels_to_gemeindedaten = here("~/projects/dst/DATEN/statistik_austria/lst_daten/")
path_excel_bls = here("~/projects/dst/DATEN/statistik_austria/lst_daten/AN_gjvz_BL_2004-2022.xlsx")
# where to save the processed lst data
out_dir_lst_data = here("processed_lst_data/")
raw_data = incomeR::read_lst_data(
dir_with_excels = dir_with_excels_to_gemeindedaten,
sex = sex,
type = type,
variable = variable,
out_dir = out_dir_lst_data
)
# bind all the years together
raw_data = bind_rows(raw_data)
# bind all the years together
raw_data = bind_rows(raw_data)
raw_data
# bind all the years together
raw_data = bind_rows(raw_data)
# clean and adjust for inflation -------------------------------------------
incomeR::data_vpi_raw
devtools::load_all()
# clean and adjust for inflation -------------------------------------------
data_vpi = get_yearly_inflation()
# clean and adjust for inflation -------------------------------------------
max_year = raw_data$year %>% max(na.rm=T)
max_year
# consts for income data
sex = c("Zusammen")
type = c("Nettobezüge")
variable = c("Median")
# consts for gemeindeänderungen
current_year_gemeinden = 2022
path_to_gem_aenderungen = here("~/projects/dst/DATEN/statistik_austria/Gemeindeaenderungen_ab2002bis2022.xlsx")
dir_with_excels_to_gemeindedaten = here("~/projects/dst/DATEN/statistik_austria/lst_daten/")
path_excel_bls = here("~/projects/dst/DATEN/statistik_austria/lst_daten/AN_gjvz_BL_2004-2022.xlsx")
# where to save the processed lst data
out_dir_lst_data = here("processed_lst_data/")
raw_data = incomeR::read_lst_data(
dir_with_excels = dir_with_excels_to_gemeindedaten,
sex = sex,
type = type,
variable = variable,
out_dir = out_dir_lst_data
)
raw_data
# bind all the years together
raw_data = bind_rows(raw_data)
raw_data
out_dir_gem_changes = here("raw_gem_changes")
if (!dir.exists(out_dir_gem_changes)) {
dir.create(out_dir_gem_changes)
}
historic_gemeindestaende = get_clean_gemeinden(current_year_gemeinden,
path_to_aenderungen = path_to_gem_aenderungen,
out_dir = out_dir_gem_changes,
TEST = FALSE
)
# raw data as on the income sheet
historic_top_low_data = get_historic_income(raw_data, historic_gemeindestaende)
historic_top_low_data
historic_top_low_data
historic_top_low_data[[¹]]
historic_top_low_data[[1]]
historic_top_low_data[[1]] %>% count(variable)
# consts for income data
sex = c("Zusammen")
type = c("Nettobezüge")
variable = c("P10", "P50", "P90")
# consts for gemeindeänderungen
current_year_gemeinden = 2022
path_to_gem_aenderungen = here("~/projects/dst/DATEN/statistik_austria/Gemeindeaenderungen_ab2002bis2022.xlsx")
dir_with_excels_to_gemeindedaten = here("~/projects/dst/DATEN/statistik_austria/lst_daten/")
path_excel_bls = here("~/projects/dst/DATEN/statistik_austria/lst_daten/AN_gjvz_BL_2004-2022.xlsx")
# where to save the processed lst data
out_dir_lst_data = here("processed_lst_data/")
raw_data = incomeR::read_lst_data(
dir_with_excels = dir_with_excels_to_gemeindedaten,
sex = sex,
type = type,
variable = variable,
out_dir = out_dir_lst_data
)
# bind all the years together
raw_data = bind_rows(raw_data)
out_dir_gem_changes = here("raw_gem_changes")
if (!dir.exists(out_dir_gem_changes)) {
dir.create(out_dir_gem_changes)
}
historic_gemeindestaende = get_clean_gemeinden(current_year_gemeinden,
path_to_aenderungen = path_to_gem_aenderungen,
out_dir = out_dir_gem_changes,
TEST = FALSE
)
historic_top_low_data
historic_top_low_data[[1]]
historic_top_low_data[[1]] %>% count(variable)
raw_data
raw_data
# how many years are in the income data? We only need the historic gemeindestatus
# for these years
years_with_lst_data = raw_data %>% pull(year) %>% unique
years_with_lst_data
if (!str_detect(years_with_lst_data[[1]], "\\d{4}")) {
years_with_lst_data = as.character(glue("20{years_with_lst_data}"))
}
# pre format raw data
year_ = raw_data$year[[1]]
if(!str_detect(year_, "\\d{4}")){
raw_data = raw_data %>%
mutate(
year = as.character(glue("20{year}"))
)
}
raw_data
i = 1
# the current gemeinde
current_gem = names(historic_gemeindestaende)[[i]]
current_gem
# the gemeinden it was historically made from
historic_gemeinden = historic_gemeindestaende[[i]] %>%
filter(year >= min(years_with_lst_data),
year <= max(years_with_lst_data),)
# for every year in the income data, get the income for the gemeinden
income = left_join(historic_gemeinden,
raw_data,
join_by(year == year,
gkz == gkz)) %>%
mutate(.before = gkz, gkz_current = current_gem) %>%
mutate(
year = as.numeric(year),
val = as.numeric(val)
)
income
variable = c("P10", "Median", "P90")
# consts for gemeindeänderungen
current_year_gemeinden = 2022
path_to_gem_aenderungen = here("~/projects/dst/DATEN/statistik_austria/Gemeindeaenderungen_ab2002bis2022.xlsx")
dir_with_excels_to_gemeindedaten = here("~/projects/dst/DATEN/statistik_austria/lst_daten/")
path_excel_bls = here("~/projects/dst/DATEN/statistik_austria/lst_daten/AN_gjvz_BL_2004-2022.xlsx")
# where to save the processed lst data
out_dir_lst_data = here("processed_lst_data/")
raw_data = incomeR::read_lst_data(
dir_with_excels = dir_with_excels_to_gemeindedaten,
sex = sex,
type = type,
variable = variable,
out_dir = out_dir_lst_data
)
# bind all the years together
raw_data = bind_rows(raw_data)
out_dir_gem_changes = here("raw_gem_changes")
if (!dir.exists(out_dir_gem_changes)) {
dir.create(out_dir_gem_changes)
}
raw_data
historic_gemeindestaende = get_clean_gemeinden(current_year_gemeinden,
path_to_aenderungen = path_to_gem_aenderungen,
out_dir = out_dir_gem_changes,
TEST = FALSE
)
# raw data as on the income sheet
historic_top_low_data = get_historic_income(raw_data, historic_gemeindestaende)
historic_top_low_data
# clean and adjust for inflation -------------------------------------------
max_year = raw_data$year %>% max(na.rm=T)
data_vpi = get_yearly_inflation()
data_vpi = get_yearly_inflation(max_year)
historic_top_low_data[[1]]
d = historic_top_low_data[[i]]
d
data_vpi
d %>%
left_join(data_vpi, join_by(year))
max_year
# clean and adjust for inflation -------------------------------------------
max_year = historic_top_low_data[[1]]$year[[1]]
max_year
data_vpi = get_yearly_inflation(max_year)
d = historic_top_low_data[[i]]
data_vpi
d %>%
left_join(data_vpi, join_by(year)) %>%
mutate(val_real = val / (index_2022 / 100))
data_clean = d %>%
left_join(data_vpi, join_by(year)) %>%
mutate(val_real = val / (index_2022 / 100)) %>%
select(year, gkz=gkz_current, name, val, val_real, variable)
data_clean
# -------------------------------------------------------------------------
# adjust for inflation ----------------------------------------------------
# -------------------------------------------------------------------------
data_adjusted = map(seq_along(historic_top_low_data), function(i){
d = historic_top_low_data[[i]]
data_clean = d %>%
left_join(data_vpi, join_by(year)) %>%
mutate(val_real = val / (index_2022 / 100)) %>%
select(year, gkz=gkz_current, name, val, val_real, variable)
return(data_clean)
})
data_adjusted[[1]]
# -------------------------------------------------------------------------
# Write out
# -------------------------------------------------------------------------
bind_rows(data_adjusted)
2100 * 19 * 3
2115 * 19 * 3
historic_gem_income_data
data_nom = historic_gem_income_data[[1]]
data_nom
# -------------------------------------------------------------------------
## Adjust data for inflation
# -------------------------------------------------------------------------
data_real_all = map(historic_gem_income_data, function(data_nom) {
data_real = data_nom %>%
left_join(data_vpi, join_by(year)) %>%
mutate(val_real = val / (index_2022 / 100))
return(data_real)
}) %>%
bind_rows() %>%
select(gkz = gkz_current, name, year, val, val_real)
data_real_all
data_real_all %>% count(gkz, year
data_real_all %>% count(gkz, year )
data_real_all %>% count(gkz, year, sort = T)
data_real_all %>%
group_by(gkz, year) %>%
mutate(n=n()) %>%
filter(n>1)
data_real_all %>%
group_by(gkz, year) %>%
summarise(
y_min = min(val_real),
y_max = max(val_real)
)
data_real_all %>% filter(gkz=="40835", year==2017)
data_real_all %>%
group_by(gkz, year) %>%
summarise(
y_min = min(val_real),
y_max = max(val_real)
) %>% filter(gkz=="40835")
data_real_all %>%
group_by(gkz, year) %>%
summarise(
y_min = min(val_real),
y_max = if_else(n() > 1, max(val_real), NA)
) %>% filter(gkz=="40835")
data_clean = data_real_all %>%
group_by(gkz, year) %>%
summarise(
y_min = min(val_real),
y_max = if_else(n() > 1, max(val_real), NA)
)
dim(data_clea)
dim(data_clean)
2115 * 19
data_clean %>% head
# one file for all gemeinden
op_all = "~/projects/dst/2023/setembro/2023-09-einkommens-karte/public/data/all_gems_years.csv"
write_csv(data_clean, op_all)
file.info(op_all)
file.info(op_all)$size
fs::file_size(op_all)
fs::file_size(op_all)
op_all
path = "~/projects/dst/DATEN/statistik_austria/lst_daten/AN_gjvz_BL_2004-2022.xlsx"
bl_lookup = list(
c("bl" = "Burgenland", "id" = 1),
c("bl" = "Kärnten", "id" = 2),
c("bl" = "Niederösterreich", "id" = 3),
c("bl" = "Oberösterreich", "id" = 4),
c("bl" = "Salzburg", "id" = 5),
c("bl" = "Steiermark", "id" = 6),
c("bl" = "Tirol", "id" = 7),
c("bl" = "Vorarlberg", "id" = 8),
c("bl" = "Wien", "id" = 9),
c("bl" = "Österreich", "id" = 0)
) %>% bind_rows()
# read sheets
sheets = excel_sheets(path)
years = str_match(sheets, "\\d{2}") %>% paste0("20", .)
data_list = map(sheets, function(s){
data = read_xlsx(path, s, skip = 1)
year = str_match(s, "\\d{2}") %>% paste0("20", .)
formatted = statistik_format_raw_lsv(data) %>%
rename(bl = gkz) %>%
mutate(bl = str_to_title(bl)) %>%
mutate(year = year) %>%
left_join(bl_lookup)
})
# read sheets
sheets = excel_sheets(path)
years = str_match(sheets, "\\d{2}") %>% paste0("20", .)
data_list = map(sheets, function(s){
data = read_xlsx(path, s, skip = 1)
year = str_match(s, "\\d{2}") %>% paste0("20", .)
formatted = statistik_format_raw_lsv(data) %>%
rename(bl = gkz) %>%
mutate(bl = str_to_title(bl)) %>%
mutate(year = year) %>%
left_join(bl_lookup)
})
# make one per bl
per_bl = bind_rows(data_list) %>%
split(.$bl)
per_bl_clean = per_bl[!names(per_bl) %in% c("Zusammen", "unbekannt", "Ausland")]
# write out
data_each_bl = map(per_bl_clean, function(bl){
# only median and netto
bl_clean = bl %>%
filter(
type == "Nettobezüge",
variable == "Median",
sex == "Zusammen"
)
# get inflationd data
max_year = bl_clean$year %>% max
data_vpi = get_yearly_inflation(max_year) %>% mutate(year=as.character(year))
bl_adjusted = bl_clean %>%
left_join(data_vpi, join_by(year)) %>%
mutate(val_real = as.numeric(val) / (index_2022 / 100))
bl_id = bl$id[[1]]
path = makePath(glue("{output_dir}/{bl_id}.csv"))
write_csv(bl_adjusted, path)
bl_adjusted
})
# write out
data_each_bl = map(per_bl_clean, function(bl){
# only median and netto
bl_clean = bl %>%
filter(
type == "Nettobezüge",
variable == "Median",
sex == "Zusammen"
)
# get inflationd data
max_year = bl_clean$year %>% max
data_vpi = get_yearly_inflation(max_year) %>% mutate(year=as.character(year))
bl_adjusted = bl_clean %>%
left_join(data_vpi, join_by(year)) %>%
mutate(val_real = as.numeric(val) / (index_2022 / 100))
bl_id = bl$id[[1]]
# path = makePath(glue("{output_dir}/{bl_id}.csv"))
# write_csv(bl_adjusted, path)
bl_adjusted
})
data_each_bl
# write out
data_each_bl = map(per_bl_clean, function(bl){
# only median and netto
bl_clean = bl %>%
filter(
type == "Nettobezüge",
variable == "Median",
sex == "Zusammen"
)
# get inflationd data
max_year = bl_clean$year %>% max
data_vpi = get_yearly_inflation(max_year) %>% mutate(year=as.character(year))
bl_adjusted = bl_clean %>%
left_join(data_vpi, join_by(year)) %>%
mutate(val_real = as.numeric(val) / (index_2022 / 100))
bl_id = bl$id[[1]]
# path = makePath(glue("{output_dir}/{bl_id}.csv"))
# write_csv(bl_adjusted, path)
bl_adjusted
}) %>% bind_rows()
data_each_bl
devtools::load_all()
# -------------------------------------------------------------------------
## Data for each Bundesland
# -------------------------------------------------------------------------
# bundeslaender
data_each_bl = processBlData(path = "~/projects/dst/DATEN/statistik_austria/lst_daten/AN_gjvz_BL_2004-2022.xlsx")
library(tidyverse)
library(here)
library(glue)
library(sf)
library(rajudas)
library(jsonlite)
# loading this package
devtools::load_all()
# consts for income data
sex = c("Zusammen")
type = c("Nettobezüge")
variable = c("Median")
# consts for gemeindeänderungen
current_year_gemeinden = 2022
path_to_gem_aenderungen = here("~/projects/dst/DATEN/statistik_austria/Gemeindeaenderungen_ab2002bis2022.xlsx")
dir_with_excels_to_gemeindedaten = here("~/projects/dst/DATEN/statistik_austria/lst_daten/")
path_excel_bls = here("~/projects/dst/DATEN/statistik_austria/lst_daten/AN_gjvz_BL_2004-2022.xlsx")
# where to save the processed lst data
out_dir_lst_data = here("processed_lst_data/")
raw_data = incomeR::read_lst_data(
dir_with_excels = dir_with_excels_to_gemeindedaten,
sex = sex,
type = type,
variable = variable,
out_dir = out_dir_lst_data
)
# bind all the years together
raw_data = bind_rows(raw_data)
out_dir_gem_changes = here("raw_gem_changes")
if (!dir.exists(out_dir_gem_changes)) {
dir.create(out_dir_gem_changes)
}
historic_gemeindestaende = get_clean_gemeinden(current_year_gemeinden,
path_to_aenderungen = path_to_gem_aenderungen,
out_dir = out_dir_gem_changes,
TEST = FALSE
)
# raw data as on the income sheet
historic_gem_income_data = get_historic_income(raw_data, historic_gemeindestaende)
max_year = historic_gem_income_data[[1]]$year %>% max
data_vpi = get_yearly_inflation(index_year = max_year)
# -------------------------------------------------------------------------
## Adjust data for inflation
# -------------------------------------------------------------------------
data_real_all = map(historic_gem_income_data, function(data_nom) {
data_real = data_nom %>%
left_join(data_vpi, join_by(year)) %>%
mutate(val_real = val / (index_2022 / 100))
return(data_real)
}) %>%
bind_rows() %>%
select(gkz = gkz_current, name, year, val, val_real)
data_real_all
data_real_all %>%
group_by(gkz, year) %>%
summarise(
x = year,
y = mean(val_real),
agg = if_else(n() > 1, "true", "false")
)
data_real_all %>%
group_by(gkz, year) %>%
summarise(
y = mean(val_real),
agg = if_else(n() > 1, "true", "false")
) %>% select(gkz, x = year, y, agg) -> data_clean
data_clean
data_clean %>% filter(agg=="true")
data_real_all %>%
group_by(gkz, year) %>%
summarise(
y = mean(val_real),
agg = if_else(n() > 1, T, F)
) %>% select(gkz, x = year, y, agg) -> data_clean
write_csv(data_clean, "~/Desktop/income.csv")
data_real_all %>%
group_by(gkz, year) %>%
summarise(
y = mean(val_real),
agg = if_else(n() > 1, 1, 0)
) %>% select(gkz, x = year, y, agg) -> data_clean
write_csv(data_clean, "~/Desktop/income.csv")
